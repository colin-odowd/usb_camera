
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
#
# Author: Colin O'Dowd

from re import A, S
from PyQt5 import QtCore, QtGui, QtWidgets 
from PyQt5.QtGui import QIcon, QPixmap
import sys
from types import FrameType
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
import cv2
from datetime import datetime
import numpy as np
import time
import psutil
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QApplication


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setWindowTitle("Project Starfish Prototype GUI")
        MainWindow.resize(1920, 1080)
        MainWindow.setStyleSheet("background-color: rgb(9, 40, 122);")
        QApplication.setOverrideCursor(Qt.CrossCursor)

        self.cameraViewer = QtWidgets.QWidget(MainWindow)
        self.cameraViewer.setObjectName("cameraViewer")

        self.logo =  QtWidgets.QLabel(self.cameraViewer)
        self.logo.setGeometry(QtCore.QRect(825, 20, 270, 42))
        pixmap = QPixmap('teleflex-logo.png')
        pixmap = pixmap.scaled(270, 42)        
        self.logo.setPixmap(pixmap)

        self.dateLabel = QtWidgets.QLabel(self.cameraViewer)
        self.dateLabel.setGeometry(QtCore.QRect(20, 15, 225, 50))
        self.dateLabel.setObjectName("dateLabel")
        self.dateLabel.setFont(QtGui.QFont("Times", 15, weight=QtGui.QFont.Bold))
        self.dateLabel.setStyleSheet("color : white")

        self.timeLabel = QtWidgets.QLabel(self.cameraViewer)
        self.timeLabel.setGeometry(QtCore.QRect(245, 15, 225, 50))
        self.timeLabel.setObjectName("timeLabel")
        self.timeLabel.setFont(QtGui.QFont("Times", 15, weight=QtGui.QFont.Bold))
        self.timeLabel.setStyleSheet("color : white")

        self.batteryLabel = QtWidgets.QLabel(self.cameraViewer)
        self.batteryLabel.setGeometry(QtCore.QRect(1820, 15, 100, 50))
        self.batteryLabel.setObjectName("batteryLabel")
        self.batteryLabel.setFont(QtGui.QFont("Times", 15, weight=QtGui.QFont.Bold))
        self.batteryLabel.setStyleSheet("color : white")

        self.cameraFeed = QtWidgets.QLabel(self.cameraViewer)
        self.cameraFeed.setGeometry(QtCore.QRect(320, 110, 1280, 960))
        self.cameraFeed.setObjectName("cameraFeed")

        self.startBTN = QtWidgets.QLabel(self.cameraViewer)
        self.startBTN.setPixmap(QPixmap("startButton.png").scaled(100,100))
        self.startBTN.setGeometry(QtCore.QRect(110, 490, 100, 100))
        self.startBTN.setObjectName("startBTN")
        self.startBTN.mousePressEvent = self.startButtonPress
        self.startBTN.mouseReleaseEvent = self.startButtonRelease

        # self.startBTN = QtWidgets.QPushButton(self.cameraViewer)
        # self.startBTN.setGeometry(QtCore.QRect(110, 610, 100, 100))
        # self.startBTN.setObjectName("startBTN")
        # self.startBTN.clicked.connect(self.StartFeed)

        self.stopBTN = QtWidgets.QLabel(self.cameraViewer)
        self.stopBTN.setPixmap(QPixmap("stopButton.png").scaled(100,100))
        self.stopBTN.setGeometry(QtCore.QRect(110, 610, 100, 100))
        self.stopBTN.setObjectName("stopBTN")
        self.stopBTN.mousePressEvent = self.stopButtonPress
        self.stopBTN.mouseReleaseEvent = self.stopButtonRelease

        # self.stopBTN = QtWidgets.QPushButton(self.cameraViewer)
        # self.stopBTN.setGeometry(QtCore.QRect(110, 720, 100, 100))
        # self.stopBTN.setObjectName("stopBTN")
        # self.stopBTN.clicked.connect(self.StopFeed)

        self.saveImageBTN = QtWidgets.QLabel(self.cameraViewer)
        self.saveImageBTN.setPixmap(QPixmap("saveImageButton.png").scaled(100,100))
        self.saveImageBTN.setGeometry(QtCore.QRect(110, 720, 100, 100))
        self.saveImageBTN.setObjectName("saveImageBTN")
        self.saveImageBTN.mousePressEvent = self.saveImageButtonPress
        self.saveImageBTN.mouseReleaseEvent = self.saveImageButtonRelease

        # self.saveImageBTN = QtWidgets.QPushButton(self.cameraViewer)
        # self.saveImageBTN.setGeometry(QtCore.QRect(110, 830, 100, 100))
        # self.saveImageBTN.setObjectName("saveImageBTN")
        # self.saveImageBTN.clicked.connect(self.SaveImage)

        self.startVideoBTN = QtWidgets.QLabel(self.cameraViewer)
        self.startVideoBTN.setPixmap(QPixmap("startVideoButton.png").scaled(100,100))
        self.startVideoBTN.setGeometry(QtCore.QRect(110, 820, 100, 100))
        self.startVideoBTN.setObjectName("startVideoBTN")
        self.startVideoBTN.mousePressEvent = self.startVideoButtonPress
        self.startVideoBTN.mouseReleaseEvent = self.startVideoButtonRelease

        # self.startVideoBTN = QtWidgets.QPushButton(self.cameraViewer)
        # self.startVideoBTN.setGeometry(QtCore.QRect(110, 830, 100, 100))
        # self.startVideoBTN.setObjectName("startVideoBTN")
        # self.startVideoBTN.clicked.connect(self.StartVideo)

        self.stopVideoBTN = QtWidgets.QLabel(self.cameraViewer)
        self.stopVideoBTN.setPixmap(QPixmap("stopVideoButton.png").scaled(100,100))
        self.stopVideoBTN.setGeometry(QtCore.QRect(110, 930, 100, 100))
        self.stopVideoBTN.setObjectName("stopVideoBTN")
        self.stopVideoBTN.mousePressEvent = self.stopVideoButtonPress
        self.stopVideoBTN.mouseReleaseEvent = self.stopVideoButtonRelease

        # self.stopVideoBTN = QtWidgets.QPushButton(self.cameraViewer)
        # self.stopVideoBTN.setGeometry(QtCore.QRect(110, 940, 100, 100))
        # self.stopVideoBTN.setObjectName("stopVideoBTN")
        # self.stopVideoBTN.clicked.connect(self.StopVideo)
        
        """ self.brightnessSlider = QtWidgets.QSlider(self.cameraViewer)
        self.brightnessSlider.setFocusPolicy(Qt.StrongFocus)
        self.brightnessSlider.setTickPosition(QSlider.TicksBothSides)
        self.brightnessSlider.setMinimum(-255)
        self.brightnessSlider.setMaximum(255)
        self.brightnessSlider.setTickInterval(11)
        self.brightnessSlider.setSingleStep(1)
        self.brightnessSlider.setGeometry(QtCore.QRect(1330, 220, 50, 100))
        self.brightnessSlider.setObjectName("brightnessSlider")
        self.brightnessSlider.valueChanged.connect(self.BrightnessSliderChange) 
        self.brightnessLabel = QtWidgets.QLabel(self.cameraViewer)
        self.brightnessLabel.setGeometry(QtCore.QRect(1330, 230, 150, 50))
        self.brightnessLabel.setText("Brightness: " + str(self.brightnessSlider.value()))
        self.brightnessLabel.setObjectName("brightnessLabel") """

        MainWindow.setCentralWidget(self.cameraViewer)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.Worker1 = Worker1()
        self.Worker1.start()
        self.Worker1.ImageUpdate.connect(self.ImageUpdateSlot)

        self.Worker2 = Worker2()
        self.Worker2.dateTrack.connect(self.updateDate)
        self.Worker2.timeTrack.connect(self.updateTime)
        self.Worker2.batteryTrack.connect(self.updateBattery)
        self.Worker2.start()

    def updateDate(self, date):
        self.dateLabel.setText(date)
    
    def updateTime(self, time):
        self.timeLabel.setText(time)
    
    def updateBattery(self, battery):
        self.batteryLabel.setText(battery + "%")

    def ImageUpdateSlot(self, Image):
        self.cameraFeed.setPixmap(QPixmap.fromImage(Image))

    # def StartFeed(self):
    #     self.Worker1.start()
    
    # def StopFeed(self):
    #     self.Worker1.stop()

    # def SaveImage(self):
    #     self.Worker1.saveImage()

    # def StartVideo(self):
    #     self.Worker1.startVideo()
    
    def StopVideo(self):
        self.Worker1.stopVideo()

    def startButtonPress(self, event):
        self.startBTN.setPixmap(QPixmap("startButtonPressed.png").scaled(100,100))

    def startButtonRelease(self, event):
        self.startBTN.setPixmap(QPixmap("startButton.png").scaled(100,100))
        self.Worker1.start()

    def stopButtonPress(self, event):
        self.stopBTN.setPixmap(QPixmap("stopButtonPressed.png").scaled(100,100))

    def stopButtonRelease(self, event):
        self.stopBTN.setPixmap(QPixmap("stopButton.png").scaled(100,100))
        self.Worker1.stop()

    def saveImageButtonPress(self, event):
        self.saveImageBTN.setPixmap(QPixmap("saveImageButtonPressed.png").scaled(100,100))

    def saveImageButtonRelease(self, event):
        self.saveImageBTN.setPixmap(QPixmap("saveImageButton.png").scaled(100,100))
        self.Worker1.saveImage()
    
    def startVideoButtonPress(self, event):
        self.startVideoBTN.setPixmap(QPixmap("startVideoButtonPressed.png").scaled(100,100))

    def startVideoButtonRelease(self, event):
        self.startVideoBTN.setPixmap(QPixmap("startVideoButton.png").scaled(100,100))
        self.Worker1.startVideo()
        
    def stopVideoButtonPress(self, event):
        self.stopVideoBTN.setPixmap(QPixmap("stopVideoButtonPressed.png").scaled(100,100))

    def stopVideoButtonRelease(self, event):
        self.stopVideoBTN.setPixmap(QPixmap("stopVideoButton.png").scaled(100,100))
        self.Worker1.stopVideo()
        
    """ def BrightnessSliderChange(self, value):
        self.brightnessLabel.setText("Brightness: " + str(value))
        self.Worker1.updateBrightness(value) """

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate

class Worker1(QThread):
    def __init__(self):
        super(Worker1, self).__init__()
        self.ThreadActive = None
        self.Capture = None
        self.frame = None
        self.videoCapture = None
        self.videoFile = None
        self.brightnessValue = 0

    ImageUpdate = pyqtSignal(QImage)
    def run(self):
        self.ThreadActive = True
        self.Capture = cv2.VideoCapture(0)
        while self.ThreadActive:
            ret, self.frame = self.Capture.read()
            if ret:
                #self.FlippedImage = cv2.flip(frame, 1)
                Image = cv2.cvtColor(self.frame, cv2.COLOR_BGR2RGB)
                """ BrightnessMatrix = np.ones(Image.shape, dtype = "uint8") * abs(self.brightnessValue)
                if (self.brightnessValue > 0): 
                    Image = cv2.add(Image, BrightnessMatrix)
                elif (self.brightnessValue < 0):
                    Image = cv2.subtract(Image, BrightnessMatrix) """
                ConvertToQtFormat = QImage(Image.data, Image.shape[1], Image.shape[0], QImage.Format_RGB888)
                Pic = ConvertToQtFormat.scaled(1280, 960, Qt.KeepAspectRatio)
                self.ImageUpdate.emit(Pic)
                if self.videoCapture:
                    self.videoFile.write(self.frame)
            else:
                Pic = QPixmap('background.png')
                self.ImageUpdate.emit(Pic)
        self.Capture.release()
    def stop(self):
        self.ThreadActive = False
        self.quit()
    def saveImage(self):
        time = datetime.now()      
        img_name = "image_{}.png".format(time.strftime("%Hh%Mm%Ss"))
        if self.Capture.isOpened():
            cv2.imwrite(img_name, self.frame)
    def startVideo(self):
        time = datetime.now()         
        video_name = "video_{}.avi".format(time.strftime("%Hh%Mm%Ss"))
        codec = cv2.VideoWriter_fourcc(*'MJPG')
        self.videoFile = cv2.VideoWriter(video_name, codec, 30.0, (640, 480))
        self.videoCapture = True
    def stopVideo(self):
        self.videoCapture = False
        self.videoFile.release()
    def updateBrightness(self, value):
        self.brightnessValue = value

class Worker2(QThread):
    dateTrack = pyqtSignal(str)
    timeTrack = pyqtSignal(str)
    batteryTrack = pyqtSignal(str)
    
    def __init__(self):
        super(Worker2, self).__init__()

    def run(self):
        self.ThreadActive = True
        while self.ThreadActive:
            time.sleep(0.1)
            cur_date = datetime.now().strftime("%B %d, %Y")
            cur_time = datetime.now().strftime("%H:%M:%S")
            curr_battery = str(psutil.sensors_battery().percent)
            self.dateTrack.emit(cur_date)
            self.timeTrack.emit(cur_time)
            self.batteryTrack.emit(curr_battery)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

